   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 dList main

   3  $$2 :

   4  ListaFunc : TFunc $$2 ListaFunc
   5            |

   6  TFunc : FUNCT type IDENT '(' ')' dList bloco
   7        | FUNCT type IDENT '(' dList ')' dList bloco

   8  dList : decl dList
   9        |

  10  $$3 :

  11  decl : type $$3 TArray Lid ';'

  12  Lid : Lid ',' id
  13      | id

  14  id : IDENT

  15  $$4 :

  16  TArray : '[' NUM ']' $$4 TArray
  17         |

  18  type : INT
  19       | DOUBLE
  20       | BOOL

  21  main : VOID MAIN '(' ')' bloco

  22  bloco : '{' listacmd '}'

  23  listacmd : listacmd cmd
  24           |

  25  cmd : exp ';'
  26      | IF '(' exp ')' cmd

  27  exp : exp '+' exp
  28      | exp '>' exp
  29      | exp AND exp
  30      | NUM
  31      | '(' exp ')'
  32      | IDENT
  33      | exp '=' exp
  34      | exp '[' exp ']'

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . dList main  (2)
	dList : .  (9)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	VOID  reduce 9

	type  goto 6
	dList  goto 7
	decl  goto 8


state 3
	type : INT .  (18)

	.  reduce 18


state 4
	type : DOUBLE .  (19)

	.  reduce 19


state 5
	type : BOOL .  (20)

	.  reduce 20


state 6
	decl : type . $$3 TArray Lid ';'  (11)
	$$3 : .  (10)

	.  reduce 10

	$$3  goto 9


state 7
	prog : $$1 dList . main  (2)

	VOID  shift 10
	.  error

	main  goto 11


state 8
	dList : decl . dList  (8)
	dList : .  (9)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	VOID  reduce 9

	type  goto 6
	dList  goto 12
	decl  goto 8


state 9
	decl : type $$3 . TArray Lid ';'  (11)
	TArray : .  (17)

	'['  shift 13
	IDENT  reduce 17

	TArray  goto 14


state 10
	main : VOID . MAIN '(' ')' bloco  (21)

	MAIN  shift 15
	.  error


state 11
	prog : $$1 dList main .  (2)

	.  reduce 2


state 12
	dList : decl dList .  (8)

	.  reduce 8


state 13
	TArray : '[' . NUM ']' $$4 TArray  (16)

	NUM  shift 16
	.  error


state 14
	decl : type $$3 TArray . Lid ';'  (11)

	IDENT  shift 17
	.  error

	Lid  goto 18
	id  goto 19


state 15
	main : VOID MAIN . '(' ')' bloco  (21)

	'('  shift 20
	.  error


state 16
	TArray : '[' NUM . ']' $$4 TArray  (16)

	']'  shift 21
	.  error


state 17
	id : IDENT .  (14)

	.  reduce 14


state 18
	decl : type $$3 TArray Lid . ';'  (11)
	Lid : Lid . ',' id  (12)

	';'  shift 22
	','  shift 23
	.  error


state 19
	Lid : id .  (13)

	.  reduce 13


state 20
	main : VOID MAIN '(' . ')' bloco  (21)

	')'  shift 24
	.  error


state 21
	TArray : '[' NUM ']' . $$4 TArray  (16)
	$$4 : .  (15)

	.  reduce 15

	$$4  goto 25


state 22
	decl : type $$3 TArray Lid ';' .  (11)

	.  reduce 11


state 23
	Lid : Lid ',' . id  (12)

	IDENT  shift 17
	.  error

	id  goto 26


state 24
	main : VOID MAIN '(' ')' . bloco  (21)

	'{'  shift 27
	.  error

	bloco  goto 28


state 25
	TArray : '[' NUM ']' $$4 . TArray  (16)
	TArray : .  (17)

	'['  shift 13
	IDENT  reduce 17

	TArray  goto 29


state 26
	Lid : Lid ',' id .  (12)

	.  reduce 12


state 27
	bloco : '{' . listacmd '}'  (22)
	listacmd : .  (24)

	.  reduce 24

	listacmd  goto 30


state 28
	main : VOID MAIN '(' ')' bloco .  (21)

	.  reduce 21


state 29
	TArray : '[' NUM ']' $$4 TArray .  (16)

	.  reduce 16


state 30
	bloco : '{' listacmd . '}'  (22)
	listacmd : listacmd . cmd  (23)

	IDENT  shift 31
	NUM  shift 32
	IF  shift 33
	'('  shift 34
	'}'  shift 35
	.  error

	exp  goto 36
	cmd  goto 37


state 31
	exp : IDENT .  (32)

	.  reduce 32


state 32
	exp : NUM .  (30)

	.  reduce 30


state 33
	cmd : IF . '(' exp ')' cmd  (26)

	'('  shift 38
	.  error


state 34
	exp : '(' . exp ')'  (31)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 39


state 35
	bloco : '{' listacmd '}' .  (22)

	.  reduce 22


state 36
	cmd : exp . ';'  (25)
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'='  shift 41
	'>'  shift 42
	'+'  shift 43
	'['  shift 44
	';'  shift 45
	.  error


state 37
	listacmd : listacmd cmd .  (23)

	.  reduce 23


state 38
	cmd : IF '(' . exp ')' cmd  (26)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 46


state 39
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : '(' exp . ')'  (31)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'='  shift 41
	'>'  shift 42
	'+'  shift 43
	'['  shift 44
	')'  shift 47
	.  error


state 40
	exp : exp AND . exp  (29)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 48


state 41
	exp : exp '=' . exp  (33)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 49


state 42
	exp : exp '>' . exp  (28)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 50


state 43
	exp : exp '+' . exp  (27)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 51


state 44
	exp : exp '[' . exp ']'  (34)

	IDENT  shift 31
	NUM  shift 32
	'('  shift 34
	.  error

	exp  goto 52


state 45
	cmd : exp ';' .  (25)

	.  reduce 25


state 46
	cmd : IF '(' exp . ')' cmd  (26)
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'='  shift 41
	'>'  shift 42
	'+'  shift 43
	'['  shift 44
	')'  shift 53
	.  error


state 47
	exp : '(' exp ')' .  (31)

	.  reduce 31


state 48
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp AND exp .  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	'['  shift 44
	AND  reduce 29
	'='  reduce 29
	'>'  reduce 29
	'+'  reduce 29
	')'  reduce 29
	';'  reduce 29
	']'  reduce 29


state 49
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp '=' exp .  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'='  shift 41
	'>'  shift 42
	'+'  shift 43
	'['  shift 44
	')'  reduce 33
	';'  reduce 33
	']'  reduce 33


state 50
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp '>' exp .  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'+'  shift 43
	'['  shift 44
	'='  reduce 28
	')'  reduce 28
	';'  reduce 28
	']'  reduce 28


state 51
	exp : exp . '+' exp  (27)
	exp : exp '+' exp .  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)

	AND  shift 40
	'['  shift 44
	'='  reduce 27
	'>'  reduce 27
	'+'  reduce 27
	')'  reduce 27
	';'  reduce 27
	']'  reduce 27


state 52
	exp : exp . '+' exp  (27)
	exp : exp . '>' exp  (28)
	exp : exp . AND exp  (29)
	exp : exp . '=' exp  (33)
	exp : exp . '[' exp ']'  (34)
	exp : exp '[' exp . ']'  (34)

	AND  shift 40
	'='  shift 41
	'>'  shift 42
	'+'  shift 43
	'['  shift 44
	']'  shift 54
	.  error


state 53
	cmd : IF '(' exp ')' . cmd  (26)

	IDENT  shift 31
	NUM  shift 32
	IF  shift 33
	'('  shift 34
	.  error

	exp  goto 36
	cmd  goto 55


state 54
	exp : exp '[' exp ']' .  (34)

	.  reduce 34


state 55
	cmd : IF '(' exp ')' cmd .  (26)

	.  reduce 26


Rules never reduced:
	$$2 :  (3)
	ListaFunc : TFunc $$2 ListaFunc  (4)
	ListaFunc :  (5)
	TFunc : FUNCT type IDENT '(' ')' dList bloco  (6)
	TFunc : FUNCT type IDENT '(' dList ')' dList bloco  (7)


26 terminals, 19 nonterminals
35 grammar rules, 56 states
